<!--
 * @Descripttion: 运营中心管理--企业用户管--运营中心用户
 * @version: 
 * @Author: yangxq
 * @Date: 2019-07-18 09:48:16
 * @LastEditors: sueRimn
 * @LastEditTime: 2019-07-23 09:58:58
 -->
<template>
  <div>
    <div class="Crumbs">
      <el-breadcrumb separator-class="el-icon-arrow-right">
        <el-breadcrumb-item>运营中心</el-breadcrumb-item>
        <el-breadcrumb-item>企业用户</el-breadcrumb-item>
        <el-breadcrumb-item>运营中心用户</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <div class="main-wrap">
      <el-row class="location">
        <el-col :span="12">
          <h3>运营中心用户</h3>
        </el-col>
        <el-col :span="12" class="add-btn-style">
          <el-button type="primary" icon="el-icon-plus" @click="add()">新增</el-button>
        </el-col>
      </el-row>
      <div class="main-container">
        <div class="enterpriserUser-wrap">
          <div class="left-tree">
            <el-input placeholder="输入关键字进行过滤" v-model="filterText"></el-input>

            <el-tree
              class="filter-tree"
              :data="treeData"
              :props="defaultProps"
              default-expand-all
              node-key="orgCode"
              :filter-node-method="filterNode"
              ref="tree"
              highlight-current
              @node-click="handleNodeClick"
            ></el-tree>
          </div>
          <div class="right-con">
            <div class="list-wrap">
              <el-table v-loading.lock="isLoading" :data="tableData" show-overflow-tooltip>
                <el-table-column
                  label="用户名"
                  prop="loginName"
                  show-overflow-tooltip
                  align="center"
                  min-width="10%"
                ></el-table-column>
                <el-table-column
                  label="手机号"
                  prop="userTelphone"
                  show-overflow-tooltip
                  align="center"
                  min-width="10%"
                ></el-table-column>
                <el-table-column
                  label="角色"
                  prop="userTelphone"
                  show-overflow-tooltip
                  align="center"
                  min-width="10%"
                ></el-table-column>
                <el-table-column
                  label="姓名"
                  prop="userName"
                  show-overflow-tooltip
                  align="center"
                  min-width="10%"
                ></el-table-column>
                <el-table-column
                  label="账号状态"
                  prop="userAuthStatusName"
                  show-overflow-tooltip
                  align="center"
                  min-width="10%"
                ></el-table-column>
                <el-table-column label="操作" show-overflow-tooltip align="center" min-width="10%">
                  <template slot-scope="scope">
                    <div>
                      <el-link type="primary" @click="resetPassword(scope.row.id)">重置密码</el-link>
                      <el-link type="primary">锁定</el-link>
                    </div>
                  </template>
                </el-table-column>
              </el-table>
            </div>
            <!-- <Pagination
              :widgetInfo="widgetInfo"
              v-on:sonHandleCurrentChange="sonHandleCurrentChange"
            />-->
            <el-pagination
              @size-change="handleSizeChange"
              @current-change="handleCurrentChange"
              :current-page="widgetInfo.pageNo"
              :page-sizes="[10, 15, 20,25]"
              :page-size="widgetInfo.pageSize"
              :total="widgetInfo.total"
              layout="total, sizes, prev, pager, next, jumper"
            ></el-pagination>
          </div>
        </div>
      </div>
    </div>
    <el-dialog title="创建管理员" :visible.sync="dialogFormVisible" width="450px">
      <div class="createAdmin-wrap">
        <el-form :inline="true" :model="createAdminForm" :rules="rules" ref="createAdminForm">
          <el-form-item label="手机号:" prop="userTelphone">
            <el-input v-model="createAdminForm.userTelphone"></el-input>
          </el-form-item>
          <el-form-item label="用户名:" prop="loginName">
            <el-input v-model="createAdminForm.loginName"></el-input>
          </el-form-item>
          <el-form-item label="提示" class="tip">
            <div>1-14位，支持纯英文、纯数字或者英文+数字组合，区分英文大小写，不支持特殊符号和中文</div>
          </el-form-item>
          <el-form-item label="姓名:" prop="userName">
            <el-input v-model="createAdminForm.userName"></el-input>
          </el-form-item>
          <el-form-item label="登录密码:" prop="password">
            <el-input type="password" v-model="createAdminForm.password"></el-input>
          </el-form-item>
          <el-form-item label="提示" class="tip">
            <div>6~14位，由英文+数字组合，区分英文大小写，不支持特殊符号</div>
          </el-form-item>
          <el-form-item label="角色:" prop="roleIds">
            <el-select placeholder="请选择" filterable v-model.trim="createAdminForm.roleIds">
              <el-option
                v-for="item in roles"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="性别:" prop="userSex">
            <el-select placeholder="请选择性别" v-model.trim="createAdminForm.userSex">
              <el-option
                v-for="item in userSexs"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="邮箱:" prop="userEmail">
            <el-input v-model="createAdminForm.userEmail"></el-input>
          </el-form-item>
          <el-form-item label="身份证:" prop="userCardNo">
            <el-input v-model="createAdminForm.userCardNo"></el-input>
          </el-form-item>
          <el-form-item class="btn-item">
            <el-button type="primary" size="small" @click="saveOrUpdateForm('createAdminForm')">确认</el-button>
            <el-button size="small">取消</el-button>
          </el-form-item>
        </el-form>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import Pagination from "~/components/Pagination";
export default {
  components: {
    Pagination
  },
  data() {
    return {
      dialogFormVisible: false,
      isLoading: false,
      userObj: {},
      filterText: "",
      // currentNode: "",
      userSexs: [
        {
          label: "男",
          value: 0
        },
        {
          label: "女",
          value: 1
        },
        {
          label: "其他",
          value: 2
        }
      ],
      roles: [],
      createAdminForm: {
        userTelphone: "",
        loginName: "",
        userName: "",
        password: "",
        roleIds: "",
        userSex: "",
        userEmail: "",
        userCardNo: ""
      },
      treeData: [],
      tableData: [],
      orgCode: "",
      widgetInfo: {
        pageSize: 10,
        pageNo: 1,
        total: 0
      },
      defaultProps: {
        children: "childNodes",
        label: "orgName"
        // children: "childNodes",
        // label: "orgName"
      },
      rules: {
        userTelphone: [
          { required: true, message: "请输入手机号", trigger: "blur" },
          {
            pattern: /^(1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]{8})$/,
            message: "请输入正确格式的手机号！"
          }
        ],
        loginName: [
          { required: true, message: "请输入用户名", trigger: "blur" },
          {
            pattern: /^[a-zA-Z0-9]{1,14}$/,
            message: "请输入正确格式的用户名！"
          }
        ],
        userName: [
          { required: true, message: "请输入用户名", trigger: "blur" }
        ],
        password: [
          { required: true, message: "请输入密码", trigger: "blur" },
          {
            pattern: /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,14}$/,
            message: "请输入正确格式的密码！"
          }
        ],
        roleIds: [{ required: true, message: "请选择角色", trigger: "blur" }],
        userSex: [{ required: true, message: "请选择性别", trigger: "blur" }]
      }
    };
  },
  computed: {
    currentOrgcode() {
      return this.treeData.length > 0 ? this.treeData[0].orgCode : "";
    }
  },
  mounted() {
    let that = this;
    //左侧树
    that.getOperationOrgTree(() => {
      this.$nextTick(() => {
        that.$refs["tree"].setCurrentKey(that.treeData[0].orgCode);
      });
      //列表
      that.getTableData();
      //获取角色
      that.findRoleListBySysCodeAndOrgCode();
    });
    that.userObj = that._Storage.getObj("userObj", "userObj");
  },
  methods: {
    //表格数据
    getTableData() {
      let that = this;
      that.isLoading = true;
      that.$axios
        .$POST_NEW({
          api_name: "queryUserListBySysCodeAndOrgCode",
          params: {
            centerType: 2,
            orgCode: that.orgCode || that.currentOrgcode,
            pageNo: that.widgetInfo.pageNo,
            pageSize: that.widgetInfo.pageSize
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            that.isLoading = false;
            var data = res.data.data;
            that.tableData = data.rows;
            that.widgetInfo.total = data.total === null ? 0 : data.total;
          } else {
            that.tableData = [];
            that.widgetInfo.list = res.data.rows;
            that.widgetInfo.total = 0;
            console.log("没有数值。。。。。");
          }
        });
    },
    //左侧树结构
    getOperationOrgTree(cb) {
      let that = this;
      that.isLoading = true;
      that.$axios
        .$POST_NEW({
          api_name: "getOperationOrgTree",
          params: {}
        })
        .then(res => {
          if (res.data.code == "success" && res.data.data.length > 0) {
            that.isLoading = false;
            that.treeData = res.data.data;
            cb & cb();
          } else {
          }
        });
    },
    filterNode(value, data) {
      if (!value) return true;
      return data.orgName.indexOf(value) !== -1;
    },
    handleNodeClick(data) {
      let that = this;
      that.orgCode = data.orgCode;
      that.getTableData();
      that.findRoleListBySysCodeAndOrgCode();
    },
    //新增用户
    add() {
      let that = this;
      // 判断是否有数据。有数据时则不弹出新增页面
      that.$axios
        .$POST_NEW({
          api_name: "findAdminUser",
          params: {
            sysCode: "operation_system",
            orgCode: that.orgCode || that.currentOrgcode
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            if (res.data.data.length) {
              that.$message({
                message: "管理员账户已存在！",
                type: "warning"
              });
            } else {
              that.dialogFormVisible = true;
            }
          }
        });
    },
    //重置密码
    resetPassword(id) {
      let that = this;
      that
        .$confirm(
          "<div><h3>确认重置密码?</h3>重置后密码为a123456，重置后请及时告知用户</div>",
          "提示",
          {
            confirmButtonText: "确定",
            cancelButtonText: "取消",
            type: "warning"
          }
        )
        .then(() => {
          that.$message({
            type: "success",
            message: "删除成功!"
          });
          that.resetPasswordByUserIdBusiness(id);
        })
        .catch(() => {
          that.$message({
            type: "info",
            message: "已取消重置密码"
          });
        });
    },
    resetPasswordByUserIdBusiness(id) {
      let that = this;
      that.$axios
        .$POST_NEW({
          api_name: "resetPasswordByUserIdBusiness",
          params: {
            userId: id
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            this.$message({
              message: "密码重置成功!",
              type: "success"
            });
          }
        });
    },
    //保存用户
    saveOrUpdateForm(formName) {
      var that = this;
      this.$refs[formName].validate(valid => {
        if (valid) {
          that.$axios
            .$POST_NEW({
              api_name: "saveOrUpdateUser",
              params: {
                centerType: 2,
                createUserId: that.userObj.id,
                userTelphone: that.createAdminForm.userTelphone,
                loginName: that.createAdminForm.loginName,
                userName: that.createAdminForm.userName,
                password: that.createAdminForm.password,
                roleIds: that.createAdminForm.roleIds,
                userSex: that.createAdminForm.userSex,
                userEmail: that.createAdminForm.userEmail,
                userCardNo: that.createAdminForm.userCardNo,
                orgCode: that.orgCode || that.currentOrgcode
              }
            })
            .then(res => {
              if (res.data.code == "success") {
                that.getTableData();
                that.$message({
                  message: res.data.message,
                  type: "success"
                });
                that.dialogFormVisible = false;
              } else {
                this.$message({
                  message: res.data.message,
                  type: "error"
                });
              }
            });
        }
      });
    },
    //根据系统code与组织机构code获取角色列表
    findRoleListBySysCodeAndOrgCode() {
      let that = this;
      that.$axios
        .$POST_NEW({
          api_name: "findRoleListBySysCodeAndOrgCode",
          params: {
            centerType: 2,
            orgCode: that.orgCode || that.currentOrgcode
          }
        })
        .then(res => {
          if (res.data.code == "success" && res.data.data.data.length > 0) {
            this.roles = res.data.data.data;
          } else {
          }
        });
    },
    //根据系统CODE、组织机构CODE获取管理员账号
    findAdminUser() {
      let that = this;
      that.$axios
        .$POST_NEW({
          api_name: "findAdminUser",
          params: {
            orgCode: that.orgCode || that.currentOrgcode,
            sysCode: "manager"
          }
        })
        .then(res => {
          if (res.data.code == "success") {
          } else {
          }
        });
    },
    //分页
    // sonHandleCurrentChange(widgetInfo) {
    //   this.widgetInfo.pageSize = widgetInfo.pageSize
    //     ? parseInt(widgetInfo.pageSize)
    //     : this.widgetInfo.pageSize;
    //   this.widgetInfo.pageNo = widgetInfo.pageNo
    //     ? parseInt(widgetInfo.pageNo)
    //     : this.widgetInfo.pageNo;
    //   this.getTableData();
    // }
    handleSizeChange(val) {
      this.widgetInfo.pageSize = val;
      this.getTableData();
    },
    handleCurrentChange(val) {
      this.widgetInfo.pageNo = val;
      this.getTableData();
    }
  },
  watch: {
    filterText(val) {
      this.$refs.tree.filter(val);
    }
  }
};
</script>

<style lang="scss" scoped>
.add-btn-style {
  text-align: right;
  padding-right: 25px;
  box-sizing: border-box;
}
.enterpriserUser-wrap {
  padding: 20px;
  display: flex;
  .left-tree {
    flex: 0 0 260px;
    width: 236px;
    transition: all 1s;
    height: 700px;
    overflow-y: auto;
  }
  .right-con {
    flex: 1;
    padding: 0 15px 0;
  }
}
.createAdmin-wrap {
  /deep/.el-form {
    .el-form-item {
      width: 100%;
      margin-bottom: 20px;
      label {
        width: 85px;
      }
      .el-form-item__content {
        width: calc(100% - 95px);
      }
      .el-select {
        width: 100%;
      }
      //提示
      &.tip {
        margin: -15px 0 5px 0;
        label {
          opacity: 0;
          line-height: initial;
        }
        .el-form-item__content {
          font-size: 12px;
          color: #b1b1b2;
          line-height: 1.4;
        }
      }
      //底部按钮
      &.btn-item {
        .el-form-item__content {
          text-align: center;
          width: 100%;
        }
      }
    }
  }
}
</style>