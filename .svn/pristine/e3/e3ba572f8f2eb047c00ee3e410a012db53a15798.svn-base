<!-- 下行列表页 -->
<template>
  <div>
    <div class="Crumbs">
      <el-breadcrumb separator-class="el-icon-arrow-right">
        <el-breadcrumb-item :to="{ path: '/' }">硬件平台</el-breadcrumb-item>
        <el-breadcrumb-item>用户管理</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <div class="main-wrap">
      <div class="location">用户管理</div>

      <div class="main-container">
        <!-- 查询 -->
        <el-form :inline="true" :model="formData" ref="formData" class="hardware-form">
          <el-form-item label="登录账号:" prop="loginName" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model.trim="formData.loginName"></el-input>
          </el-form-item>
          <el-form-item label="用户名称:" prop="userName" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model.trim="formData.userName"></el-input>
          </el-form-item>
          <el-form-item label="手机号:" prop="userTelphone" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model.trim="formData.userTelphone"></el-input>
          </el-form-item>
          <el-form-item label="用户状态:" :label-width="labelWidth">
            <el-select placeholder="全部" filterable v-model.trim="formData.authStatus">
              <el-option
                v-for="item in onlineStates"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>

          <el-form-item label=" " class="serch-btn">
            <el-button type="primary" size="small" @click="lookFor()">查询</el-button>
            <el-button size="small" @click="reset('formData')">重置</el-button>
          </el-form-item>
        </el-form>
        <!-- 列表 -->
        <div class="list-wrap">
          <el-table v-loading.lock="isLoading" :data="tableData" stripe show-overflow-tooltip>
            <el-table-column label="用户ID" prop="id" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="用户名称" prop="userName" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="手机号" prop="userTelphone" show-overflow-tooltip align="center"></el-table-column>
<!--            <el-table-column label="用户角色" prop="deviceAddress" show-overflow-tooltip align="center"></el-table-column>-->
            <el-table-column label="创建时间" prop="createTime" show-overflow-tooltip align="center"></el-table-column>
<!--            <el-table-column label="用户状态" prop="userAuthStatusName" show-overflow-tooltip align="center"></el-table-column>-->

            <el-table-column label="用户状态" prop="userStatus" show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <div>{{transformOnlineState(scope.row.userStatus) }}</div>
              </template>
            </el-table-column>

<!--            <el-table-column label="备注" prop="model" show-overflow-tooltip align="center"></el-table-column>-->
            <el-table-column label="操作" show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <el-link type="primary" @click="dialogForm_delRows(scope.row)">删除</el-link>
                <el-link type="primary" @click="pswReset(scope.$index, scope.row)">编辑</el-link>
                <el-link type="primary" @click="changeState(scope.row)">{{transformOnlineName(scope.row.userStatus) }}</el-link>
                <el-link type="primary" @click="pswReset(scope.row)">密码重置</el-link>
              </template>
            </el-table-column>
          </el-table>
        </div>
        <Pagination :widgetInfo="widgetInfo" v-on:sonHandleCurrentChange="sonHandleCurrentChange" />
      </div>
    </div>
  </div>
</template>

<script>
  import Pagination from "~/components/Pagination";
  export default {
    components: {
      Pagination,
    },

    data() {
      return {
        flag: false,
        isLoading: false,
        labelWidth: "100px",

        roles: [
          {
            value: "",
            label: "全部"
          }
        ],

        units: [
          {
            value: " ",
            label: "全部"
          }
        ],

        onlineStates: [
          {
            //设备状态
            value: "",
            label: "全部"
          },
          {
            value: 0,
            label: "正常"
          },
          {
            value: 1,
            label: "禁用"
          }
        ],

        formData: {},

        tableData: [],
        loading: true,
        pageNo: 1,
        pageSize: 6,
        total: 0,

        widgetInfo: {
          pageSize: 6,
          pageNo: 1,
          total: 0
        },
        indexNum: 0
      };
    },
    created() {

    },
    computed: {
      transformOnlineState(state) {
        //设备状态
        return function(state) {
          if (state == 0) {
            return "正常";
          } else if (state == 1) {
            return "禁用";
          }
        };
      },
      transformOnlineName(state) {
        //设备状态
        return function(state) {
          if (state == 1) {
            return "正常";
          } else if (state == 0) {
            return "禁用";
          }
        };
      },
    },
    methods: {
      changeSubCode() {

      },
      findMonitorDeviceStateDownList() {
        this.isLoading = true;
        this.$axios
          .$POST({
            api_name: "findUserListBySysCodeAndOrgCode",
            params: {
              sysCode: 'manager',
              orgCode: "03_DEFAULT",
              userTelphone: this.formData.userTelphone,
              userName: this.formData.userName,
              loginName: this.formData.loginName,
              authStatus: this.formData.authStatus,
              pageNo: this.widgetInfo.pageNo,
              pageSize: this.widgetInfo.pageSize
            }
          })
          .then(res => {
            // console.log(JSON.stringify(res));
            if (res.data.code == "success") {
              this.isLoading = false;
              var data = res.data.data;
              this.tableData = data.rows;
              this.widgetInfo.total = data.total === null ? 0 : data.total;
            } else {
              this.tableData = [];
              this.widgetInfo.list = data.rows;
              this.widgetInfo.total = 0;
              console.log("没有数值。。。。。");
            }
          });
      },
      sonHandleCurrentChange(widgetInfo) {
        this.widgetInfo.pageSize = widgetInfo.pageSize
          ? parseInt(widgetInfo.pageSize)
          : this.widgetInfo.pageSize;
        this.widgetInfo.pageNo = widgetInfo.pageNo
          ? parseInt(widgetInfo.pageNo)
          : this.widgetInfo.pageNo;
        this.findMonitorDeviceStateDownList();
      },

      //删除
      dialogForm_delRows(row) {
        this.$confirm('确认删除该用户?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.isLoading = true;
          this.$axios
            .$POST({
              api_name: "deleteUser",
              params: {
                userId: row.id
              }
            })
            .then(res => {
              this.isLoading = false;
              if (res.data.code == "success") {

              } else {

              }
            });
        })
      },
      //编辑
      toEditPage(index, row) {
        //跳转到详情
        // this.$store.commit("updateDownData", row);
        // this._Storage.set("downListRow", row)
        this._Storage.setObj("downListRow", "obj", row);
        // let obj = JSON.parse(this._Storage.get("downListRow"))
        // console.log(1111, obj.brand)
        this.$router.push({
          name: "downLine-downlinkControlDetail",
          params: {
            row: row
          }
        });
      },
      //密码重置
      pswReset(row){
        this.$confirm('确认重置该用户密码?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.isLoading = true;
          this.$axios
            .$POST({
              api_name: "resetPasswordByUserId",
              params: {
                userId: row.id
              }
            })
            .then(res => {
              this.isLoading = false;
              if (res.data.code == "success") {

              } else {

              }
            });
        })
      },

      //改变状态
      changeState(row){
        if (row.userStatus == 0){

        } else if (row.userStatus == 1) {

        }
      },

      reset(formName) {
        //重置
        this.formData = {};
        this.findMonitorDeviceStateDownList();
      },

      lookFor() {
        //查询
        this.findMonitorDeviceStateDownList();
      }
    }
  };
</script>

<style lang="scss" scoped>
  @import "~/assets/css/list.scss";
  /deep/.el-table {
    .el-table__body-wrapper {
      //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
      height: calc(
        100vh - 90px - 64px - 20px - 65px - 76px - 85px - 82px
      ) !important;
    }
  }
</style>
