<template>
  <div>
    <div class="Crumbs">
      <el-breadcrumb separator-class="el-icon-arrow-right">
        <el-breadcrumb-item >系统配置</el-breadcrumb-item>
        <el-breadcrumb-item>角色管理</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <div class="main-wrap">
      <el-row class="location">
        <el-col :span="12">
          <h3>角色管理</h3>
        </el-col>
        <el-col :span="12" class="add-btn-style">
          <el-button
            type="primary"
            icon="el-icon-plus"
            @click="dialogForm('add_form')"
            v-show="btns[0].isShow"
          >新增角色</el-button>
        </el-col>
      </el-row>
      <el-main class="main_table" style="width:100%">
        <el-table
          stripe
          :data="tableData"
          border
          style="width: 100%"
          class="sysAdmin_table"
          v-loading="loading"
        >
          <el-table-column prop="roleOrder" label="序号" :show-overflow-tooltip="true"></el-table-column>
          <el-table-column prop="roleName" label="角色名称" :show-overflow-tooltip="true"></el-table-column>
          <el-table-column prop="roleAlias" label="角色别名" :show-overflow-tooltip="true"></el-table-column>
          <el-table-column prop="roleRemark" :show-overflow-tooltip="true" label="备注"></el-table-column>
          <el-table-column prop="createTime" label="创建时间"></el-table-column>
          <!-- <el-table-column prop="createUserId" label="操作人"></el-table-column> -->
          <el-table-column label="操作">
            <template slot-scope="scope">
              <el-button
                @click="dialogForm('update_form',scope.row.id)"
                type="text"
                size="small"
                v-show="btns[1].isShow"
              >
                编辑
                <span class="margin-all">|</span>
              </el-button>

              <el-button
                @click="dialogForm_delRows(scope.row)"
                type="text"
                size="small"
                v-show="btns[2].isShow"
              >
                删除
                <span class="margin-all">|</span>
              </el-button>

              <el-button
                @click="authorize(scope.row)"
                type="text"
                size="small"
                v-show="btns[3].isShow"
              >授权</el-button>
            </template>
          </el-table-column>
        </el-table>

        <!--<div class="block">-->
        <!--<el-pagination background @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="currentPage1" :page-size="2" layout="total, prev, pager, next, jumper" :total="1000"></el-pagination>-->
        <!--</div>-->
        <Pagination :widgetInfo="widgetInfo" v-on:sonHandleCurrentChange="sonHandleCurrentChange" />

        <!--新增角色-->
        <el-dialog :title="dialogForm_title" :visible.sync="dialogFormAdmin" width="24%">
          <el-form :model="ruleForm_admin" :rules="rules" ref="ruleForm_admin" v-loading="loading">
            <el-form-item label="角色名称" prop="roleName" :label-width="formLabelWidth">
              <el-input
                v-model.trim="ruleForm_admin.roleName"
                autocomplete="off"
                placeholder="请输入角色名称"
              ></el-input>
            </el-form-item>
            <el-form-item label="角色别名" prop="roleAlias" :label-width="formLabelWidth">
              <el-input
                v-model.trim="ruleForm_admin.roleAlias"
                autocomplete="off"
                placeholder="请输入角色别名"
              ></el-input>
            </el-form-item>

            <el-form-item label="备注" prop="roleRemark" :label-width="formLabelWidth">
              <el-input type="textarea" v-model="ruleForm_admin.roleRemark" placeholder="请输入备注"></el-input>
            </el-form-item>

            <div class="msgbox-item">
              <div style="width: 85px" class="item-name">
                <b style="color: #f00;">*</b>序号:
              </div>
              <div style="display: flex;">
                <el-input-number
                  v-model="ruleForm_admin.roleOrder"
                  controls-position="right"
                  :min="1"
                ></el-input-number>
              </div>
            </div>
          </el-form>
          <div slot="footer" class="dialog-footer">
            <el-button @click="dialogFormAdmin = false">取 消</el-button>
            <el-button type="primary" @click="submitForm('ruleForm_admin')">确 定</el-button>
          </div>
        </el-dialog>

        <!--角色授权-->
        <el-dialog title="角色授权" :visible.sync="dialogFormAuthorize" width="24%">
          <el-form
            :model="ruleForm_authorize"
            :rules="rules"
            ref="ruleForm_authorize"
            v-loading="loading"
            style="max-height:300px;overflow: auto"
          >
            <el-tree
              :data="ruleForm_authorize.data2"
              ref="auth_tree"
              show-checkbox
              node-key="id"
              :default-expanded-keys="ruleForm_authorize.orgTree_expanded"
              :default-checked-keys="ruleForm_authorize.orgTree_checked"
              :props="ruleForm_authorize.defaultProps"
            ></el-tree>
          </el-form>
          <div slot="footer" class="dialog-footer">
            <el-button @click="dialogFormAuthorize = false">取 消</el-button>
            <el-button type="primary" @click="submitForm('ruleForm_authorize')">确 定</el-button>
          </div>
        </el-dialog>
      </el-main>
    </div>

    <!--新增角色-->
    <!--<el-dialog title="新增/编辑" :visible.sync="dialogVisible" width="530px">
      <div class="dialog-body-diy-wrapper">
        <el-form
           :model="ruleForm" 
           ref="ruleForm" 
           :rules="rules" 
           label-width="80px" 
           class="demo-ruleForm"
        >
          <el-form-item label="角色名称" prop="roleName">
				    <el-input v-model="ruleForm.roleName"></el-input>
				  </el-form-item>
          <el-form-item label="备注" prop="">
            <el-input  v-model="ruleForm.remarks" type="textarea" :rows="4"></el-input>
          </el-form-item>
        </el-form>
      </div>
      <span slot="footer" class="dialog-footer">
      	<el-button type="primary" @click="submitForm('ruleForm')">确 定</el-button>
        <el-button @click="cancelForm('ruleForm')">取 消</el-button>
      </span>
    </el-dialog>-->

    <!--编辑权限-->
    <el-dialog title="编辑权限" :visible.sync="dialogVisible" width="530px">
      <div class="dialog-body-diy-wrapper"></div>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click>确 定</el-button>
        <el-button @click>取 消</el-button>
      </span>
    </el-dialog>
  </div>
</template>
<script>
import axios from "axios";
import Pagination from "~/components/Pagination";
import { system_item, admin_dataRes } from "~/config/conf";
var update_rowId, authorize_row;
export default {
  components: {
    Pagination
  },

  data() {
    return {
      isLoading: false,
      currentBtns: [],
      btns: [
        {
          name: "新增角色",
          isShow: false
        },
        {
          name: "编辑",
          isShow: false
        },
        {
          name: "删除",
          isShow: false
        },
        {
          name: "授权",
          isShow: true
        }
      ],
      formData: {}, //查询的formData
      tableData: [], //table查询结果
      userObj: {},
      loading: true,
      widgetInfo: {
        pageSize: 10,
        pageNo: 1,
        total: 0
      },

      loading: false,
      //权限复制禁用
      copyPower_disable: true,
      default_active: "",
      systemList: [],

      widgetInfo: {
        total: null,
        pageSize: 6,
        pageNo: 1
      },

      dialogFormAdmin: false,
      dialogFormAuthorize: false,
      dialogForm_title: "",

      ruleForm_authorize: {
        data2: [],
        orgTree_checked: [],
        orgTree_expanded: [],
        defaultProps: {
          children: "children",
          label: "resName"
        }
      },

      checked: false,
      ruleForm_admin: {
        roleName: "",
        roleAlias: "",
        roleRemark: "",
        optionsAdmin: [
          {
            value: "选项1",
            label: "管理员"
          },
          {
            value: "选项2",
            label: "超级管理员"
          },
          {
            value: "选项3",
            label: "全部组织机构"
          }
        ],
        valueAdmin: [],
        roleOrder: ""
      },

      formLabelWidth: "85px",

      rules: {
        roleName: [
          { required: true, message: "请填写角色名称", trigger: "blur" },
          {
            min: 2,
            max: 30,
            message: "角色名称字符需在2-30之间",
            trigger: "blur"
          }
        ],
        roleAlias: [
          { required: true, message: "请填写角色别名", trigger: "blur" },
          {
            min: 2,
            max: 30,
            message: "角色别名字符需在2-30之间",
            trigger: "blur"
          }
        ]
      },

      currentPage1: 1,
      dialogVisible: false,
      ruleForm: {
        roleName: "",
        remarks: ""
      }
    };
  },
  mounted() {
    const that = this;
    that.userObj = that._Storage.getObj("userObj", "userObj");
    that.currentBtns = that._Storage.getObj("currentBtnArr", "currentBtnArr");
    that.isBtnShow();
  },
  computed: {},
  created() {
    this.loading = true;
    this.loadData(system_item.sysCode);
  },
  methods: {
    loadData(sysCode) {
      /*this.$axios.$POST({
        api_name: "findUserByUserId",
        params: {
        	userId:"2c938c4d6ab47d93016adf78810e0839",
        }
      }).then(res => {
	        console.log(res,"111")
	    })*/

      //获取全部角色信息
      this.$axios
        .$POST({
          api_name: "findRoleListBySysCodeAndPager",
          params: {
            sysCode: sysCode,
            pageSize: this.widgetInfo.pageSize,
            pageNo: this.widgetInfo.pageNo
          }
        })
        .then(res => {
          if (res && res.data.code == "success") {
            this.widgetInfo.total =
              res.data.data.total == null ? 0 : res.data.data.total;
            this.widgetInfo.pageSize = res.data.data.pageSize;
            this.widgetInfo.pageNo = res.data.data.pageNo;
            this.tableData = res.data.data.rows;
          }
          this.loading = false;
        });
    },
    submitForm(formName) {
      if (formName === "ruleForm_admin") {
        if (this.ruleForm_admin.roleName.indexOf(" ") !== -1) {
          this.$message.error("角色名称和别名中不能含有空格");
          return false;
        }
        //备注验证
        if (this.ruleForm_admin.roleRemark.length > 0) {
          if (
            this.ruleForm_admin.roleRemark.length < 2 ||
            this.ruleForm_admin.roleRemark.length > 30
          ) {
            this.$message.error("备注字符需在2-30之间");
            return false;
          }
        }
        this.$refs[formName].validate(valid => {
          if (valid) {
            if (this.dialogForm_title === "新建角色") {
              // console.log(getGlobalVal('useObj').id,"用户")
              this.loading = true;
              this.$axios
                .$POST({
                  api_name: "addRole",
                  params: {
                    roleOrder: this.ruleForm_admin.roleOrder,
                    roleName: this.ruleForm_admin.roleName,
                    roleAlias: this.ruleForm_admin.roleAlias,
                    roleRemark: this.ruleForm_admin.roleRemark,
                    sysCode: system_item.sysCode,
                    dataRes: admin_dataRes,
                    //createUserId:api.getGlobalVal('useObj').id,
                    createUserId: this.userObj.id
                  }
                })
                .then(res => {
                  console.log(res, "新建角色数据");
                  const code = res.data.code;
                  const message = res.data.message;
                  if (res && code === "success") {
                    this.dialogFormAdmin = false;
                    this.$message.success(message);
                    this.loading = false;
                    this.loadData(system_item.sysCode);
                    this.$refs[formName].resetFields();
                  } else {
                    this.loading = false;
                    this.$message.error(message);
                    this.$refs[formName].resetFields();
                  }
                });
              // console.log(createUserId,"id名")
            } else {
              //更新授权权限，即编辑角色
              this.$axios
                .$POST({
                  api_name: "updateRole",
                  params: {
                    id: update_rowId,
                    roleOrder: this.ruleForm_admin.roleOrder,
                    roleName: this.ruleForm_admin.roleName,
                    roleAlias: this.ruleForm_admin.roleAlias,
                    roleRemark: this.ruleForm_admin.roleRemark,
                    sysCode: system_item.sysCode,
                    dataRes: admin_dataRes,
                    updateUserId: this.userObj.id
                  }
                })
                .then(res => {
                  const code = res.data.code;
                  const message = res.data.message;
                  if (res && code === "success") {
                    this.dialogFormAdmin = false;
                    this.$message.success(message);
                    this.loadData(system_item.sysCode);
                    this.$refs[formName].resetFields();
                  } else {
                    this.$message.error(message);
                    this.$refs[formName].resetFields();
                  }
                });
            }
          } else {
            console.log("error submit!!");
            return false;
          }
        });
      } else if (formName === "ruleForm_authorize") {
        var authTree_check = [];
        for (var i of this.$refs.auth_tree.getCheckedNodes(false, true)) {
          authTree_check.push(i.id);
        }
        //api.post("http://192.168.91.138:9898/role/giveRolesForResource", {
        this.$axios
          .$POST({
            api_name: "giveRolesForResource",
            params: {
              sysCode: system_item.sysCode,
              roleId: authorize_row.id,
              resourceIds: authTree_check.join(","),
              createUserId: authorize_row.createUserId,
              dataRes: admin_dataRes,
              createDate: ""
            }
          })
          .then(res => {
            const code = res.data.code;
            const message = res.data.message;
            if (res && code === "success") {
              this.$message.success(message);
              this.dialogFormAuthorize = false;
              this.$refs[formName].resetFields();
            } else {
              this.$message.error(message);
              this.$refs[formName].resetFields();
            }
          });
      }
    },

    sonHandleCurrentChange(widgetInfo) {
      this.widgetInfo.pageSize = widgetInfo.pageSize
        ? parseInt(widgetInfo.pageSize)
        : this.widgetInfo.pageSize;
      this.widgetInfo.pageNo = widgetInfo.pageNo
        ? parseInt(widgetInfo.pageNo)
        : this.widgetInfo.pageNo;
      /*if(system_item){
            this.loadData(system_item.sysCode);   
        }*/
      this.loadData(system_item.sysCode);
    },

    dialogForm(status, roleId) {
      this.dialogFormAdmin = true;
      this.loading = true;
      this.ruleForm_admin.roleOrder = "";
      this.ruleForm_admin.roleName = "";
      this.ruleForm_admin.roleAlias = "";
      this.ruleForm_admin.roleRemark = "";

      if (status === "add_form") {
        this.dialogForm_title = "新建角色";
        this.loading = false;
      } else {
        update_rowId = roleId;
        this.dialogForm_title = "编辑角色";

        this.$axios
          .$POST({
            api_name: "findRoleById",
            params: {
              roleId: roleId
            }
          })
          .then(res => {
            const code = res.data.code;
            const message = res.data.message;
            if (res && code === "success") {
              const data = res.data.data;
              this.ruleForm_admin.roleName = data.roleName;
              this.ruleForm_admin.roleAlias = data.roleAlias;
              this.ruleForm_admin.roleRemark = data.roleRemark;
              this.ruleForm_admin.roleOrder = data.roleOrder;
            } else {
              this.$message.error(message);
            }
          });
        this.loading = false;
      }
    },

    dialogForm_delRows(row) {
      this.$confirm("确认删除角色?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.loading = true;
          this.$axios
            .$POST({
              api_name: "deleteRole",
              params: {
                roleId: row.id
              }
            })
            .then(res => {
              const code = res.data.code;
              const message = res.data.message;
              if (res && code === "success") {
                this.$message.success(message);
                this.loadData(system_item.sysCode);
                this.loading = false;
              } else {
                this.$message.error(message);
                this.loading = false;
              }
            });
        })
        .catch(() => {
          this.$message("取消删除！");
          this.loading = false;
        });
    },
    authorize(row) {
      authorize_row = row;
      console.log(row, "row");
      this.dialogFormAuthorize = true;
      this.loading = true;
      this.ruleForm_authorize.orgTree_checked = [];
      this.ruleForm_authorize.orgTree_expanded = [];
      //api.post("http://192.168.91.138:9898/res/findTreeBySysCode", {
      this.$axios
        .$POST({
          api_name: "findTreeBySysCode", //打开全部资源显示界面
          params: {
            sysCode: system_item.sysCode
          }
        })
        .then(res => {
          console.log(res, "333");
          const code = res.data.code;
          const message = res.data.message;
          if (res && code === "success") {
            var add_resAlias = function(alias_data) {
              for (let i in alias_data) {
                alias_data[i].resName += "（" + alias_data[i].resAlias + "）";
                if (alias_data[i].children.length > 0) {
                  add_resAlias(alias_data[i].children);
                }
              }
            };
            add_resAlias(res.data.data);
            this.ruleForm_authorize.data2 = res.data.data;
          } else {
            this.$message.error(message);
          }
        })
        .then(() => {
          this.$axios
            .$POST({
              api_name: "findResourceByRoleId", //通过角色roleId，确定用户已经拥有的权限
              params: {
                roleId: row.id
              }
            })
            .then(res => {
              const code = res.data.code;
              const message = res.data.message;
              const data = res.data.data;
              var adminTree_checked = [];
              if (res && code === "success") {
                var check_authTree = function(check_data) {
                  for (let i in check_data) {
                    if (check_data[i].children.length > 0) {
                      check_authTree(check_data[i].children);
                    } else {
                      adminTree_checked.push(check_data[i].id);
                    }
                  }
                };
                check_authTree(res.data.data);
                this.ruleForm_authorize.orgTree_checked = adminTree_checked;
              } else {
                this.$message.error(message);
              }
              this.loading = false;
            });
        });
    },
    handleSizeChange(val) {
      console.log(`每页 ${val} 条`);
    },
    handleCurrentChange(val) {
      console.log(`当前页: ${val}`);
    },
    organize_change(item) {
      system_item = item;
      this.loading = true;
      this.loadData(item.sysCode);
    },

    //复制权限
    copy_power() {
      //权限复制禁用
      this.copyPower_disable = !this.copyPower_disable;
      if (this.checked === false && this.ruleForm_admin.valueAdmin.length > 0) {
        this.ruleForm_admin.valueAdmin = [];
      }
    },
    isBtnShow() {
      const that = this;
      let arr = that.currentBtns;
      that.btns.forEach(element => {
        arr.forEach(item => {
          console.log(item);
          if (item.name === element.name) {
            element.isShow = item.isShow;
          }
        });
      });
    }
  }
};
</script>
<style lang="scss" scoped="scoped">
.record-table {
  height: 400px;
}

.add-btn-style {
  text-align: right;
  padding-right: 25px;
  box-sizing: border-box;
}
.main_table {
  /deep/.el-table {
    .el-table__body-wrapper {
      //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
      height: calc(100vh - 90px - 64px - 20px - 65px - 100px - 48px);
      overflow-y: auto;
      .margin-all {
        margin-left: 7px;
      }
      .el-button--small,
      .el-button--small.is-round {
        padding: 9px 0;
      }
    }
  }
}
.hardware-form .el-form-item {
  width: 23%;
}
.hardware-form {
  padding-left: 25px;
}
.msgbox-item {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  margin: 10px 0;
}
@media screen and (max-width: 1680px) {
  .main_table {
    /deep/.el-table {
      .el-table__body-wrapper {
        //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
        height: calc(100vh - 60px - 64px - 20px - 65px - 100px - 48px);
        overflow-y: auto;
      }
    }
  }
}
</style>
<style type="text/css">
.el-scrollbar__wrap {
  overflow-x: hidden;
}
</style>
