<template>
  <div>
    <div class="Crumbs">
      <el-breadcrumb separator-class="el-icon-arrow-right">
        <el-breadcrumb-item>硬件平台</el-breadcrumb-item>
        <el-breadcrumb-item>附件管理</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <div class="main-wrap">
      <el-row class="location">
        <el-col :span="12">
          <h3>附件管理</h3>
        </el-col>
        <el-col :span="12" class="add-btn-style">
          <el-button
            type="primary"
            icon="el-icon-plus"
            @click="addNewFileDiglog()"
            v-show="btns[0].isShow"
          >上传新附件</el-button>
        </el-col>
      </el-row>
      <div class="main-container">
        <!-- 查询 -->
        <el-form :inline="true" :model="formData" ref="formData" class="hardware-form">
          <el-form-item label="附件ID:" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model="formData.fileId"></el-input>
          </el-form-item>
          <el-form-item label="附件名称:" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model="formData.fileName"></el-input>
          </el-form-item>
          <el-form-item label="创建时间:" label-width="180px">
            <el-date-picker
              v-model="formData.createFileTime"
              format="yyyy-MM-dd HH:mm:ss"
              value-format="yyyy-MM-dd HH:mm:ss"
              type="datetimerange"
              range-separator="至"
              start-placeholder="开始日期"
              end-placeholder="结束日期"
            ></el-date-picker>
          </el-form-item>
          <el-form-item label=" " style="text-align: right;">
            <el-button type="primary" size="small" @click="lookFor()">查询</el-button>
            <el-button size="small" @click="reset('formData')">重置</el-button>
          </el-form-item>
        </el-form>
        <!-- 列表 -->
        <div class="list-wrap">
          <el-table v-loading.lock="isLoading" :data="tableData" stripe show-overflow-tooltip>
            <el-table-column label="附件ID" prop="id" show-overflow-tooltip></el-table-column>
            <el-table-column label="附件名称" prop="fileName" show-overflow-tooltip></el-table-column>
            <el-table-column label="创建人" prop="createByUsername" show-overflow-tooltip></el-table-column>
            <el-table-column label="创建时间" prop="createTime" show-overflow-tooltip></el-table-column>
            <el-table-column label="备注" prop="remarks" show-overflow-tooltip></el-table-column>
            <el-table-column label="操作" show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <el-link
                  type="primary"
                  @click="deleteAttachment(scope.row, scope.$index)"
                  v-show="btns[1].isShow"
                >删除</el-link>
                <el-link
                  type="primary"
                  @click="downloadAttachment(scope.row, scope.$index)"
                  v-show="btns[2].isShow"
                >下载</el-link>
              </template>
            </el-table-column>
          </el-table>
          <Pagination
            :widgetInfo="widgetInfo"
            v-on:sonHandleCurrentChange="sonHandleCurrentChange"
          />
        </div>
      </div>
    </div>

    <!--上传新文档弹框-->
    <el-dialog title="附件上传" :visible.sync="dialogVisible" width="530px" @close="closeDialog">
      <div class="dialog-body-diy-wrapper">
        <el-form
          :model="ruleForm"
          :rules="rules"
          ref="ruleForm"
          label-width="80px"
          class="demo-ruleForm"
        >
          <el-form-item label="附件名称" prop="attachmentName">
            <el-input v-model="ruleForm.attachmentName"></el-input>
          </el-form-item>
          <p class="dot1">*</p>
          <el-form-item label="上传附件" prop="uploadFile">
            <div class="info-file" >
              <div class="info-file-m">
                <el-button type="primary">选择附件</el-button>
                <input type="file" id="upfile" name="upfile" class="upfile"
                       @change="selectFile" :value="ruleForm.fileVal">
              </div>
              <div class="file-span"  v-if="fileObj != null" v-show="isSelectFile">
                <el-tooltip class="item" effect="dark" :content="fileObj.name" placement="bottom">
                  <span class="file-span-title">{{fileObj.name}}</span>
                </el-tooltip>
                <el-button type="text" class="deleted-icon" @click="deleteHandel">&times;</el-button>
              </div>
            </div>
          </el-form-item>
          <el-form-item label="备注" prop="remarks">
            <el-input v-model="ruleForm.remarks" type="textarea" :rows="4"></el-input>
          </el-form-item>
        </el-form>
      </div>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm('ruleForm')">确 定</el-button>
        <el-button @click="cancelForm('ruleForm')">取 消</el-button>
      </span>
    </el-dialog>

    <!--    删除  弹框-->
    <el-dialog custom-class="del-dialog-wrap" :visible.sync="dialogDelVisible" width="280px">
      <div class="del-dialog-main">
        <div class="icon-wrap">
          <i class="el-icon-s-opportunity"></i>
        </div>
        <div class="p-wrap">
          <p class="title-p">是否确定删除？</p>
          <p class="tips-p">删除后将不可恢复</p>
        </div>
      </div>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click="sureHandle">确 定</el-button>
        <el-button @click="cancalHandle">取 消</el-button>
      </span>
    </el-dialog>
  </div>
</template>
<script>
import Pagination from "~/components/Pagination";
import ApiConfig from "@/config/api";
export default {
  components: {
    Pagination
  },

  data() {
    return {
      isSelectFile:false,
      fileObj:null,
      arr:[],
      btns: [
        {
          name: "上传",
          isShow: false
        },
        {
          name: "删除",
          isShow: false
        },
        {
          name: "下载",
          isShow: false
        }
      ],
      currentBtns: [],
      isLoading: false,
      labelPosition: "top",
      formData: {
        //查询的formData
        fileId: "",
        fileName: "",
        createFileTime: "",
        startTime: "",
        endTime: ""
      },
      tableData: [], //table查询结果
      loading: true,
      labelWidth: "100px",
      widgetInfo: {
        pageSize: 10,
        pageNo: 1,
        total: 0
      },
      dialogVisible: false,
      dialogDelVisible: false,
      delId: "",
      ruleForm: {
        attachmentName: "",
        remarks: "",
        fileUrl: "",
        fileList: [],
        uploadFile: "",
        fileVal:""
      },
      actionUrl:ApiConfig.api["uploadfile"],
      rules: {
        attachmentName: [
          { required: true, message: "请输入附件名称", trigger: "blur" }
        ]
        //      uploadFile: [{ required: true, message: "请上传附件", trigger: "blur" }]
      }
    };
  },
  mounted() {
    const that = this;
    that.currentBtns = that._Storage.getObj("currentBtnArr", "currentBtnArr");
    that.isBtnShow();
  },
  computed: {
    userObj() {
      return this._Storage.getObj("userObj", "userObj");
    }
  },
  methods: {
    addNewFileDiglog() {
      this.dialogVisible = true;
    },
    /**
     * 上传序列号file事件
     */
    selectFile(){
      const that = this;
      let size;
      that.fileObj = document.getElementById("upfile").files[0];
      if(that.fileObj){ // 原来的代码,稍作调整
        that.arr =[]
        that.arr.push(this.fileObj)
        size = (that.fileObj.size / (1024 * 1024)).toFixed(2);
        let idx = that.fileObj.name.lastIndexOf(".");
        if (idx != -1){
          let ext = that.fileObj.name.substr(idx+1).toUpperCase();
          ext = ext.toLowerCase( );
          if(size >= 5){
            this.$message.error("文件不能大于5M");
            if(this.arr.length >= 1){
              this.fileObj = this.arr[0];
            }else{
              this.isSelectFile = false;
            }
          }else{
            this.arr[0] = this.fileObj;
            this.isSelectFile = true;
          }
        }
      }else{// 当打开本地文件,点击取消不选择时,显示已经选择过的文件,如果没有这个if则显示没有文件的状态
        if(this.arr.length >= 1){
          this.fileObj = this.arr[0];
        }else{
          this.isSelectFile = false;
        }
      }
    },
    /**
     * 删除上传文件
     */
    deleteHandel(){
      const that = this;
      that.$confirm("确定要删除("+that.fileObj.name+")吗?", "删除提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          that.fileObj =null;
          that.arr=[];
          that.ruleForm.fileVal = "";
        })
        .catch(err => {
          that.$message({
            type: "warning",
            message: "取消删除!"
          });
        });

    },

    //附件下载
    downloadAttachment(row, index) {

      this.$confirm("确定要下载吗?", "下载提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          window.open(
            "/gsafetyclound" + ApiConfig.api["downAttachment"] + "?fileId=" +
              row.id
          );
        })
        .catch(err => {
          this.$message({
            type: "warning",
            message: "取消下载!"
          });
        });
    },

    //删除附件
    deleteAttachment(row, index) {
      this.dialogDelVisible = true;
      this.delId = row.id;
    },

    //删除框的确定按钮
    sureHandle() {
      let that = this;
      this.isLoading = true;
      this.$axios
        .$POST({
          api_name: "deleteEnclosureManageInfoById",
          params: {
            id: this.delId
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            that.isLoading = false;
            that.dialogDelVisible = false;
            that.$message({
              message: res.data.rspMsg,
              type: "success"
            });
            that.getAttachmentListPage();
          } else {
            that.isLoading = false;
            that.dialogDelVisible = false;
            that.$message({
              message: res.data.rspMsg,
              type: "error"
            });
          }
        });
    },

    //删除取消按钮
    cancalHandle() {
      const that = this;
      that.dialogDelVisible = false;
      this.$message("取消删除操作");
    },

    // 附件管理的列表
    getAttachmentListPage() {
      let that = this;
      that.isLoading = true;
      that.$axios
        .$POST({
          api_name: "findEnclosureManageList",
          params: {
            fileId: that.formData.fileId,
            fileName: that.formData.fileName,
            startTime: that.formData.startTime,
            endTime: that.formData.endTime,
            pageNo: that.widgetInfo.pageNo,
            pageSize: that.widgetInfo.pageSize
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            that.isLoading = false;
            let data = res.data.data;
            that.tableData = data.rows;
            that.widgetInfo.total = data.total === null ? 0 : data.total;
          } else {
            that.tableData = [];
            that.widgetInfo.list = res.data.rows;
            that.widgetInfo.total = 0;
            console.log("没有数值。。。。。");
          }
        });
    },
    //分页
    sonHandleCurrentChange(widgetInfo) {
      this.widgetInfo.pageSize = widgetInfo.pageSize
        ? parseInt(widgetInfo.pageSize)
        : this.widgetInfo.pageSize;
      this.widgetInfo.pageNo = widgetInfo.pageNo
        ? parseInt(widgetInfo.pageNo)
        : this.widgetInfo.pageNo;
      this.getAttachmentListPage();
    },
    reset(formName) {
      //重置
      this.formData = {};
      this.getAttachmentListPage();
    },
    lookFor() {
      //查询
      if (!this.formData.createFileTime) {
        this.formData.startTime = "";
        this.formData.endTime = "";
      } else {
        // 时间处理
        this.formData.startTime = this.formData.createFileTime[0];
        this.formData.endTime = this.formData.createFileTime[1];
      }
      this.getAttachmentListPage();
    },

    //新增附件提交
    submitForm(formName) {
      let that = this;
      that.isLoading = true;
			console.log(that.userObj,"that.userObj")
      this.$refs[formName].validate(valid => {
        let parmas = new FormData();
        parmas.append("fileName", that.ruleForm.attachmentName);
        parmas.append("remarks", that.ruleForm.remarks);
        parmas.append("userId", that.userObj.id);
        parmas.append("userName", that.userObj.userName);
        parmas.append("file", that.fileObj);
        if (valid && that.fileObj) {
          that.$axios
            .$POSTFile({
              api_name: "addEnclosureManageInfo",
              fb: parmas
            })
            .then(res => {
              if (res.data.code == "success") {
                that.isLoading = false;
                that.dialogVisible = false;
                that.ruleForm.remarks = "";
                that.ruleForm.attachmentName = "";
                that.ruleForm.fileList = [];
                that.ruleForm.fileUrl = "";
                that.$message({
                  message: res.data.rspMsg,
                  type: "success"
                });
                that.getAttachmentListPage();
                that.fileObj=null;
              } else {
                that.isLoading = false;
                that.dialogVisible = true;
                that.$message({
                  message: res.data.rspMsg,
                  type: "error"
                });
              }
            });
        } else {
          that.$message({
            message: "请输入附件名称并且上传附件!",
            type: "error"
          });
          that.isLoading = false;
          return false;
        }
      });
    },
    cancelForm(formName) {
      this.ruleForm = {};
      this.dialogVisible = false;
      this.fileObj=null;
      this.$message("取消上传操作");
    },
    handleRemove(file, fileList) {
      console.log(file, fileList);
      this.ruleForm.fileList = [];
      this.ruleForm.fileUrl = "";
    },
    handlePreview(file) {
      console.log(file);
    },
    handleExceed(files, fileList) {
      this.$message.warning(`每次最多上传 1 个文件!`);
    },
    beforeRemove(file, fileList) {
      return this.$confirm(`确定移除 ${file.name}？`);
      this.ruleForm.fileList = [];
      this.ruleForm.fileUrl = "";
    },
    handleFileSuccess(res, file) {
      if (res.code == "success") {
        this.ruleForm.fileUrl = res.data.url;
        console.log(res.data.url);
      }
    },
    handleFileError(err, file, fileList) {
      console.log(err, file, fileList);
    },
    closeDialog() {
      this.ruleForm.remarks = "";
      this.ruleForm.attachmentName = "";
      this.ruleForm.fileList = [];
      this.ruleForm.fileUrl = "";
    },
    isBtnShow() {
      const that = this;
      let arr = that.currentBtns;
      that.$nextTick(() => {
        that.btns.forEach(element => {
          arr.forEach(item => {
            if (item.name === element.name) {
              element.isShow = item.isShow;
            }
          });
        });
      });
    }
  }
};
</script>
<style lang="scss" scoped="scoped">
.record-table {
  height: 400px;
}
.dot1 {
  color: #f56c6c;
  font-size: 14px;
  position: absolute;
  top: 140px;
  left: 22px;
}
.add-btn-style {
  text-align: right;
  padding-right: 25px;
  box-sizing: border-box;
}
.list-wrap {
  //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76
  overflow: hidden;
  /deep/.el-table {
    padding: 0;
    overflow: hidden;
    th {
      background: rgba(240, 243, 247, 1);
    }
    .el-table__body-wrapper {
      //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
      height: calc(100vh - 90px - 64px - 20px - 65px - 76px - 85px - 48px);
      overflow-y: auto;
    }
  }
}
.hardware-form .el-form-item {
  width: 24%;
  display: -webkit-inline-box;
  display: inline-flex;
  margin-right: 0;
}
.hardware-form .el-form-item:nth-of-type(3) {
  width: 30%;
}
.hardware-form .el-form-item:last-of-type {
  width: 18%;
}
.hardware-form {
  padding-left: 0;
}
.info-file{
  display: flex;
  flex: 1;
  .info-file-m{
    width: 112px;
    height: 40px;
    position: relative;
    overflow:hidden;
    .upfile{
      width: 112px;
      height: 40px;
      position: absolute;
      cursor: pointer;
      top: 0;
      right: 0;
      left: 0;
      bottom: 0;
      opacity: 0;
    }

  }
  .file-span-title{
    max-width: 240px;
    display: inline-block;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    vertical-align: top;
  }
  .file-span{
    width: auto;
    line-height: 40px;
    padding: 0 10px;
  }
  .deleted-icon{
    width: 40px;
    text-align: right;
  }
}
@media screen and (max-width: 1680px) {
  .list-wrap {
    /deep/.el-table {
      .el-table__body-wrapper {
        //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
        height: calc(100vh - 60px - 64px - 65px - 78px - 48px - 100px);
      }
    }
  }
}
</style>
<style type="text/css">
.el-scrollbar__wrap {
  overflow-x: hidden;

}

</style>
