 <!-- 下行列表页 -->
<template>
  <div>
    <div class="Crumbs">
      <el-breadcrumb separator-class="el-icon-arrow-right">
        <el-breadcrumb-item :to="{ path: '/' }">硬件平台</el-breadcrumb-item>
        <el-breadcrumb-item>下行控制</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <div class="main-wrap">
      <div class="location">下行控制</div>
      <div class="main-container">
        <!-- 查询 -->
        <el-form :inline="true" :model="formData" ref="formData" class="hardware-form">
          <el-form-item label="设备ID:" prop="deviceId" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model.trim="formData.deviceId"></el-input>
          </el-form-item>
          <el-form-item label="运营中心:" :label-width="labelWidth">
            <el-select
              placeholder="全部"
              filterable
              v-model.trim="formData.subCenterCode"
              @change="changeSubCode"
            >
              <el-option
                v-for="item in subCenterNames"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="业主单位:" prop="unitName" :label-width="labelWidth">
            <el-select placeholder="全部" filterable v-model.trim="formData.unit">
              <el-option
                v-for="item in units"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="状态:" :label-width="labelWidth">
            <el-select placeholder="全部" filterable v-model.trim="formData.onlineState">
              <el-option
                v-for="item in onlineStates"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="设备名称:" prop="deviceName" :label-width="labelWidth">
            <el-input v-model.trim="formData.deviceName" placeholder="请输入"></el-input>
          </el-form-item>
          <el-form-item label="品牌:" :label-width="labelWidth">
            <el-select placeholder="全部" v-model.trim="formData.brand">
              <el-option
                v-for="item in brands"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="设备型号:" prop="model" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model.trim="formData.model"></el-input>
          </el-form-item>
          <el-form-item label=" " class="serch-btn">
            <el-button type="primary" size="small" @click="lookFor()">查询</el-button>
            <el-button size="small" @click="reset('formData')">重置</el-button>
          </el-form-item>
        </el-form>
        <!-- 列表 -->
        <div class="list-wrap">
          <el-table v-loading.lock="isLoading" :data="tableData" stripe show-overflow-tooltip>
            <el-table-column label="设备ID" prop="deviceId" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="运营中心" prop="subCenterName" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="业主单位" prop="unitName" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="安装位置" prop="deviceAddress" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="设备名称" prop="deviceName" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="品牌" prop="brand" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="型号" prop="model" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="设备状态" prop="onlineState" show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <div>{{transformOnlineState(scope.row.onlineState) }}</div>
              </template>
            </el-table-column>
            <el-table-column label="创建时间" prop="createTime" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="数据库协议/参数" prop="exist" show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <div>{{transformExist(scope.row.exist) }}</div>
              </template>
            </el-table-column>
            <el-table-column label="操作" show-overflow-tooltip align="center">
              <template slot-scope="scope" v-show="scope.row.onlineState==1">
                <div>
                  <el-link
                    type="primary"
                    v-show="scope.row.exist==0 && scope.row.onlineState==1"
                    @click="getParameter(scope.row, scope.$index)"
                  >获取协议/参数</el-link>
                </div>
                <div>
                  <el-link
                    type="primary"
                    v-show="scope.row.exist==1"
                    @click="toDetail(scope.$index, scope.row)"
                  >下行</el-link>
                </div>
              </template>
            </el-table-column>
          </el-table>
        </div>
        <Pagination :widgetInfo="widgetInfo" v-on:sonHandleCurrentChange="sonHandleCurrentChange" />
      </div>
    </div>
  </div>
</template>
<script>
import Pagination from "~/components/Pagination";
export default {
  components: {
    Pagination
  },
  data() {
    return {
      flag: false,
      isLoading: false,
      labelWidth: "100px",
      subCenterNames: [
        {
          value: "",
          label: "全部"
        }
      ],
      units: [
        {
          value: " ",
          label: "全部"
        }
      ],
      onlineStates: [
        {
          //设备状态
          value: "",
          label: "全部"
        },
        {
          value: 0,
          label: "离线"
        },
        {
          value: 1,
          label: "在线"
        },
        {
          value: 2,
          label: "未接入"
        }
      ],
      brands: [
        {
          //品牌
          value: "",
          label: "全部"
        },
        {
          //品牌
          value: "河南力安",
          label: "河南力安"
        },
        {
          value: "北京乐鸟",
          label: "北京乐鸟"
        }
      ],
      formData: {},
      tableData: [],
      loading: true,
      pageNo: 1,
      pageSize: 6,
      total: 0,
      widgetInfo: {
        pageSize: 6,
        pageNo: 1,
        total: 0
      },
      indexNum: 0
    };
  },
  created() {
    this.findSubCenterValue(); //默认下拉运营中心
    this.findUnitValue(); //业主单位
  },
  computed: {
    transformOnlineState(state) {
      //设备状态
      return function(state) {
        if (state == 0) {
          return "离线";
        } else if (state == 1) {
          return "在线";
        } else if (state == 2) {
          return "未接入";
        }
      };
    },
    transformExist(state) {
      //设备状态
      return function(state) {
        if (state == 0) {
          return " ";
        } else if (state == 1) {
          return "已存在";
        }
      };
    }
  },
  methods: {
    changeSubCode() {
      this.findUnitValue();
    },
    findMonitorDeviceStateDownList() {
      //硬件平台-下行控制列表
      this.isLoading = true;
      this.$axios
        .$POST({
          api_name: "findMonitorDeviceStateDownList",
          params: {
            deviceId: this.formData.deviceId,
            //deviceId: "cayfsyxz1",
            subCenterCode: this.formData.subCenterCode,
            unitId: this.formData.unit,
            deviceAddress: this.formData.deviceAddress,
            deviceName: this.formData.deviceName,
            brand: this.formData.brand,
            model: this.formData.model,
            onlineState: this.formData.onlineState,
            createTime: this.formData.createTime,
            exist: this.formData.exist,
            pageNo: this.widgetInfo.pageNo,
            pageSize: this.widgetInfo.pageSize
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            this.isLoading = false;
            var data = res.data.data;
            this.tableData = data.rows;
            this.widgetInfo.total = data.total === null ? 0 : data.total;
          } else {
            this.tableData = [];
            this.widgetInfo.list = data.rows;
            this.widgetInfo.total = 0;
            console.log("没有数值。。。。。");
          }
        });
    },
    findUnitValue() {
      this.$axios
        .$POST({
          api_name: "findUnitValue",
          params: {
            subCenterCode: this.formData.subCenterCode
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            this.units = [];
            var list = [];
            list = res.data.data;
            for (var key in list) {
              var temp = {};
              temp.value = list[key].value;
              temp.label = list[key].label;
              this.units.push(temp);
            }
          } else {
            console.log("没有数值。。。。。");
          }
        });
    },
    findSubCenterValue() {
      //硬件平台-下行控制列表
      this.$axios
        .$POST({
          api_name: "findSubCenterValue"
        })
        .then(res => {
          if (res.data.code == "success") {
            var list = [];
            list = res.data.data;
            for (var key in list) {
              var temp = {};
              temp.value = list[key].value;
              temp.label = list[key].label;
              this.subCenterNames.push(temp);
            }
          } else {
          }
        });
    },
    toDetail(index, row) {
      //跳转到详情
      // this.$store.commit("updateDownData", row);
      // this._Storage.set("downListRow", row)
      this._Storage.setObj("downListRow", "obj", row);
      // let obj = JSON.parse(this._Storage.get("downListRow"))
      // console.log(1111, obj.brand)
      this.$router.push({
        name: "downLine-downlinkControlDetail",
        params: {
          row: row
        }
      });
    },
    getParameter(row, index) {
      //
      var params_hnla = {
        //河南力安
        monitorId: row.id,
        controlHost: row.controlHost,
        sourceId: row.sourceId,
        operationType: "4",
        operationItemType: "",
        dataValue: ""
      };
      var params_bjlnUDP = {
        //乐鸟
        monitorId: row.id,
        controlHost: row.controlHost,
        sourceId: row.sourceId,
        commandType: "2"
      };
      if (row.sourceId == "hnla") {
        this.$axios
          .$POST({
            //立安协议/参数
            api_name: "hnlaSendDown",
            params: params_hnla
          })
          .then(res => {
            if (res.data.code == "success") {
              if (res.data.data) {
                let statue = res.data.data.statue;
                if (statue == "1") {
                  row.exist == "1";
                  var that = this;
                  that.indexNum++;
                  setTimeout(function() {
                    that.getParameterAgain(
                      "hnla",
                      "hnlaSendDown",
                      row,
                      params_hnla
                    );
                  }, 5000);
                  this.$message({
                    message: "命令发送成功",
                    type: "success"
                  });
                } else if (statue == "2") {
                  this.$message({
                    message: "设备不在线或者未接入",
                    type: "warning"
                  });
                } else if (statue == "3") {
                  this.$message({
                    message: "参数无效",
                    type: "error"
                  });
                }
              }
            } else {
              this.$message("获取失败");
            }
          });
      } else if (row.sourceId == "bjlnUDP") {
        //乐鸟协议/参数
        this.$axios
          .$POST({
            api_name: "sendCommand",
            params: params_bjlnUDP
          })
          .then(res => {
            if (res.data.code == "success") {
              if (res.data.data) {
                let statue = res.data.data.state;
                if (statue == "1") {
                  row.exist == "1";
                  var that = this;
                  that.indexNum++;
                  setTimeout(function() {
                    that.getParameterAgain(
                      "bjlnUDP",
                      "sendCommand",
                      row,
                      params_bjlnUDP
                    );
                  }, 5000);
                  this.$message({
                    message: "命令发送成功",
                    type: "success"
                  });
                } else if (statue == "2") {
                  this.$message({
                    message: "设备不在线或者未接入",
                    type: "warning"
                  });
                } else if (statue == "3") {
                  this.$message({
                    message: "参数无效",
                    type: "error"
                  });
                }
              }
            } else {
              this.$message("获取失败");
            }
          });
      }
    },
    getParameterAgain(portName, apiName, row, params) {
      //再次获取协议
      if (row.sourceId == portName) {
        this.$axios
          .$POST({
            //立安协议/参数
            api_name: apiName,
            params: params
          })
          .then(res => {
            if (res.data.code == "success") {
              row.exist == "1";
              this.findMonitorDeviceStateDownList();
            } else {
              this.$message("获取失败");
            }
          });
      }
    },
    sonHandleCurrentChange(widgetInfo) {
      this.widgetInfo.pageSize = widgetInfo.pageSize
        ? parseInt(widgetInfo.pageSize)
        : this.widgetInfo.pageSize;
      this.widgetInfo.pageNo = widgetInfo.pageNo
        ? parseInt(widgetInfo.pageNo)
        : this.widgetInfo.pageNo;
      this.findMonitorDeviceStateDownList();
    },
    reset(formName) {
      //重置
      this.formData = {};
      this.findMonitorDeviceStateDownList();
      this.widgetInfo.pageNo = 1;
    },
    lookFor() {
      //查询
      this.findMonitorDeviceStateDownList();
    }
  }
};
</script>

<style lang="scss" scoped>
@import "~/assets/css/list.scss";
/deep/.el-table {
  .el-table__body-wrapper {
    //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
    height: calc(
      100vh - 90px - 64px - 20px - 65px - 76px - 85px - 82px
    ) !important;
  }
  th > .cell {
    white-space: nowrap;
    word-break: break-all;
  }
}
/deep/.el-form {
  .el-form-item__content {
    width: calc(100% - 100px);
  }
}
@media screen and (max-width: 1680px) {
  /deep/.el-table {
    .el-table__body-wrapper {
      //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
      height: calc(
        100vh - 90px - 64px - 20px - 65px - 76px - 85px - 62px
      ) !important;
    }
  }
}
</style>
