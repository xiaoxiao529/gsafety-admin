<!--
 * @Descripttion:
 * @version:
 * @Author: yangxq
 * @Date: 2019-08-09 09:25:30
 * @LastEditors: sueRimn
 * @LastEditTime: 2019-08-09 09:48:01
 -->
<template>
  <div>
    <div class="Crumbs">
      <el-breadcrumb separator-class="el-icon-arrow-right">
        <el-breadcrumb-item :to="{ path: '/' }">企业管理</el-breadcrumb-item>
        <el-breadcrumb-item>运营中心管理</el-breadcrumb-item>
      </el-breadcrumb>
    </div>
    <div class="main-wrap">
      <el-row class="location">
        <el-col :span="12">
          <h3>运营中心管理</h3>
        </el-col>
        <el-col :span="12" class="add-btn-style">
          <el-button type="primary" @click="batchExportOutStock('add')">新 增</el-button>
        </el-col>
      </el-row>
      <div class="main-container">
        <!-- 查询 -->
        <el-form :inline="true" :model="formData" ref="formData" class="hardware-form">
          <el-form-item label="运营中心:" prop="orgName" :label-width="labelWidth">
            <el-input placeholder="请输入" v-model.trim="formData.orgName"></el-input>
          </el-form-item>
          <el-form-item label="服务区域:" :label-width="labelWidth">
            <el-select placeholder="全部" filterable v-model.trim="formData.province">
              <el-option
                v-for="item in onlineStates"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>

          <el-form-item label class="serch-btn">
            <el-button type="primary" size="small" @click="lookFor()">查询</el-button>
            <el-button size="small" @click="reset()">重置</el-button>
          </el-form-item>
        </el-form>
        <!-- 列表 -->
        <div class="list-wrap">
          <el-table v-loading.lock="isLoading" :data="tableData" stripe show-overflow-tooltip>
            <el-table-column
              label="编号"
              width="290"
              prop="orgCode"
              show-overflow-tooltip
              align="center"
            ></el-table-column>
            <el-table-column label="运营中心" prop="orgName" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="服务区域" prop show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <div>{{scope.row.provinceName +scope.row.cityName}}</div>
              </template>
            </el-table-column>
            <el-table-column label="联系人" prop="contactPerson" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column
              label="联系电话"
              prop="contactPersonTel"
              show-overflow-tooltip
              align="center"
            ></el-table-column>
            <el-table-column label="服务状态" prop show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <div>{{ transformOnlineState(scope.row.serverStatus)}}</div>
              </template>
            </el-table-column>
            <el-table-column label="操作" show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <el-link
                  type="primary"
                  style="color: #999999;"
                  v-if="checkState(scope.row.serverStatus)"
                >启用</el-link>
                <el-link
                  type="primary"
                  v-if="!checkState(scope.row.serverStatus)"
                  @click="changeState(scope.row.orgCode)"
                >启用</el-link>
                <el-link type="primary" @click="editClick(scope.row.orgCode,'edit')">编辑</el-link>
                <el-link
                  type="primary"
                  v-if="checkState(scope.row.serverStatus)"
                  style="color: #999999;"
                >删除</el-link>
                <el-link
                  type="primary"
                  v-if="!checkState(scope.row.serverStatus)"
                  @click="deleteClick(scope.row.orgCode)"
                >删除</el-link>
              </template>
            </el-table-column>
          </el-table>
          <Pagination
            :widgetInfo="widgetInfo"
            v-on:sonHandleCurrentChange="sonHandleCurrentChange"
          />
        </div>
      </div>
    </div>
    <el-dialog :title="optTitle" :visible.sync="dialogVisible" width="1000px">
      <div class="dialog-body-diy-wrapper">
        <el-form
          class="dialog-form-style"
          :label-position="labelPosition"
          label-width="120px"
          :rules="rules"
          ref="plan"
          :model="plan"
        >
          <el-row>
            <el-col :span="8">
              <el-form-item label="运营中心名称" prop="orgName">
                <el-input :disabled="dialogState" v-model.trim="plan.orgName"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="服务区域" class="is-required" prop="fwqyValue">
                <el-cascader
                  :disabled="dialogState"
                  style="width: 100%;"
                  v-model="plan.fwqyValue"
                  :options="serviceArea"
                  @change="handleChange"
                ></el-cascader>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="运营中心类型" prop="joinType">
                <el-select
                  :disabled="dialogState"
                  style="width: 100%;"
                  v-model="plan.joinType"
                  placeholder="请选择"
                >
                  <el-option
                    v-for="item of center_type"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value"
                  ></el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="8">
              <el-form-item label="联系地址" class="is-required" prop="lxdzValue">
                <el-cascader
                  style="width: 100%;"
                  v-model="plan.lxdzValue"
                  :options="serviceArea"
                  @change="handleChange"
                ></el-cascader>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="详细地址" prop="unitAddress">
                <el-input v-model.trim="plan.unitAddress"></el-input>
                <el-button type="primary"  @click="mapChoosePoint()">地图</el-button>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="联系人" prop="contactPerson">
                <el-input v-model.trim="plan.contactPerson"></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="8">
              <el-form-item label="联系电话" prop="contactPersonTel">
                <el-input v-model.trim="plan.contactPersonTel"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="是否提供监测服务" prop>
                <el-radio-group v-model="plan.monitorServiceStatus">
                  <el-radio :label="1">是</el-radio>
                  <el-radio :label="0">否</el-radio>
                </el-radio-group>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="24">
              <el-form-item label="合同上传" prop="uploadFile">
                <el-upload
                  class="upload-demo"
                  ref="upload"
                  action="/test/ownerunit/uploadOperationOrgAttach"
                  list-type="text"
                  :show-file-list="false"
                  :http-request="UploadImage"
                >
                  <el-button type="primary">上传附件</el-button>
                  <div slot="tip" class="el-upload__tip">* 支持jpg/png/bmp格式</div>
                </el-upload>

                <el-table
                  v-show="plan.operationOrgAttachment"
                  :show-header="false"
                  :data="plan.operationOrgAttachment"
                >
                  <el-table-column property="attachmentName"></el-table-column>
                  <el-table-column width="260">
                    <template slot-scope="scope">
                      <el-button type="primary" @click="downloadFile(scope.row)">查看</el-button>
                      <el-button
                        type="primary"
                        v-if="!scope.row.hasOwnProperty('attachmentUrl')"
                        @click="deleteFile(scope.row)"
                      >删除</el-button>
                    </template>
                  </el-table-column>
                </el-table>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
      </div>
      <span slot="footer" class="dialog-footer">
        <el-button @click="handleClose">取 消</el-button>
        <el-button type="primary" @click="saveOrUpdateForm('plan')">确 定</el-button>
      </span>
    </el-dialog>
    <el-dialog title="地图选点" :visible.sync="dialogMapVisible" width="1000px" height="1000">
      <MyMap :center="center" :zoom="zoom" v-on:mapPointChange="mapPointChange" ref="MyMap"></MyMap>
      <span slot="footer" class="dialog-footer">
        <el-button @click="handleClose">取 消</el-button>
        <el-button type="primary" @click="">确 定</el-button>
      </span>
    </el-dialog>

  </div>
</template>

<script>
import Pagination from "~/components/Pagination";
import MyMap from '~/components/baiduMap/map'
export default {
  components: {
    Pagination,
    MyMap,
  },
  data() {
    let validFwqy = (rule, value, callback) => {
      if (value == "" || value == undefined) {
        callback(new Error("服务区域不能为空"));
      } else if (value.length != 3) {
        callback(new Error("服务区域不正确"));
      } else {
        callback();
      }
    };
    let validLxdz = (rule, value, callback) => {
      if (value == "" || value == undefined) {
        callback(new Error("联系地址不能为空"));
      } else if (value.length != 3) {
        callback(new Error("联系地址不正确"));
      } else {
        callback();
      }
    };
    return {
      flag: false,
      isLoading: false,
      labelWidth: "100px",
      dialogState: true, //对话框 true为修改 false为新增
      formData: {},
      tableData: [],
      loading: true,
      pageNo: 1,
      pageSize: 10,
      total: 0,

      widgetInfo: {
        pageSize: 10,
        pageNo: 1,
        total: 0
      },
      center:{},
      zoom:11,
      dialogMapVisible:false,

      indexNum: 0,
      userId: null, //用户id
      parentTypeNameList: [], //角色
      plan: {
        fwqyValue: [],
        lxdzValue: []
      },
      dialogVisible: false, //新增弹出
      labelPosition: "top",
      optTitle: null,
      optMode: null,

      rules: {
        orgName: [
          {
            required: true,
            message: "运营中心名称不能为空",
            trigger: "blur,change"
          }
        ],
        fwqyValue: [{ validator: validFwqy }],
        joinType: [{ message: "请选择运营中心类型", trigger: "change" }],
        lxdzValue: [{ validator: validLxdz }],
        unitAddress: [
          {
            required: true,
            message: "详细地址不能为空",
            trigger: "blur,change"
          }
        ],
        contactPerson: [
          { required: true, message: "联系人不能为空", trigger: "blur,change" }
        ],
        contactPersonTel: [
          { required: true, message: "手机号不能为空", trigger: "blur,change" },
          {
            pattern: /^1[3-9][0-9]\d{8}$/,
            message: "请输入正确的手机号"
          }
        ]
      },
      // 运营中心类型
      center_type: [
        {
          value: "0",
          label: "直营"
        },
        {
          value: "1",
          label: "加盟"
        }
      ],
      //服务区域数据
      serviceArea: [],
      onlineStates: [],
      value: new Array(),
      value1: new Array()
    };
  },
  created() {
    if (process.client) {
      this.format();
      this.findUnitValue();
    }
  },
  computed: {
    transformOnlineState(state) {
      //设备状态
      return function(state) {
        if (state == 0) {
          return "待启用";
        } else if (state == 1) {
          return "已启用";
        }
      };
    },
    transformOnlineName(state) {
      //设备状态名称
      return function(state) {
        if (state == 0) {
          return "启用";
        } else if (state == 1) {
          return "禁用";
        }
      };
    },
    transformOperationType(state) {
      if (state == "1") {
        // 运营中心类型下拉框创建
      } else {
        // 运营中心类型下拉框创建
      }
    }
  },
  methods: {
    //获取数据
    findMonitorDeviceStateDownList() {
      this.isLoading = true;
      this.$axios
        .$POST_NEW({
          api_name: "queryOperationOrgList",
          params: {
            orgName: this.formData.orgName,
            province: this.formData.province,
            pageNo: this.widgetInfo.pageNo,
            pageSize: this.widgetInfo.pageSize
          }
        })
        .then(res => {
          if (res.data.code == "success") {
            this.isLoading = false;
            var data = res.data.data;
            this.tableData = data.rows;
            this.widgetInfo.total = data.total === null ? 0 : data.total;
          } else {
            this.tableData = [];
            this.widgetInfo.list = data.rows;
            this.widgetInfo.total = 0;
          }
        });
    },
    //分页
    sonHandleCurrentChange(widgetInfo) {
      this.widgetInfo.pageSize = widgetInfo.pageSize
        ? parseInt(widgetInfo.pageSize)
        : this.widgetInfo.pageSize;
      this.widgetInfo.pageNo = widgetInfo.pageNo
        ? parseInt(widgetInfo.pageNo)
        : this.widgetInfo.pageNo;
      this.findMonitorDeviceStateDownList();
    },
    //删除
    deleteClick(orgCode) {
      var that = this;
      var updateUser = this._Storage.getObj("userObj", "userObj").id;
      this.$confirm("确认删除该运营中心?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this.isLoading = true;
        this.$axios
          .$POST_NEW({
            api_name: "deleteOperationOrgByOrgCode",
            params: {
              orgCode: orgCode,
              updateUser: updateUser
            }
          })
          .then(res => {
            this.isLoading = false;
            this.$message.success(res.data.message);
            if (res.data.code == "success") {
              that.lookFor();
            }
          });
      });
    },
    //编辑
    editClick(orgCode, method) {
      const that = this;
      that.dialogState = true;
      that.dialogVisible = true;
      //编辑
      that.optTitle = "编辑";
      that.optMode = method;
      that.$axios
        .$POST_NEW({
          api_name: "queryOperationOrgByOrgCode",
          params: {
            orgCode: orgCode
          },
          time: 30000
        })
        .then(res => {
          if (res.data.code == "success") {
            that.plan = {};
            if (that.serviceArea.length == 0) {
              that.plan = JSON.parse(JSON.stringify(res.data.data));
              that.findserviceArea();
              that.$nextTick(() => {
                that.plan = JSON.parse(JSON.stringify(res.data.data));
                that.$refs["plan"].resetFields();
              });
            } else {
              that.$nextTick(() => {
                that.plan = JSON.parse(JSON.stringify(res.data.data));
                that.plan.fwqyValue = [];
                that.plan.lxdzValue = [];
                that.plan.fwqyValue.push(that.plan.province);
                that.plan.fwqyValue.push(that.plan.city);
                that.plan.lxdzValue.push(that.plan.province);
                that.plan.lxdzValue.push(that.plan.city);
                that.plan.lxdzValue.push(that.plan.contactCounty);
                that.$refs["plan"].resetFields();
              });
            }
          } else {
            that.$message.error("获取运营中心信息失败");
          }
        });
    },
    //改变运营中心状态
    changeState(orgCode) {
      var that = this;
      var updateUser = this._Storage.getObj("userObj", "userObj").id;
      this.$confirm("确认启用运营中心服务?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this.isLoading = true;
        this.$axios
          .$POST_NEW({
            api_name: "updateOperationOrgServerStatusByOrgCode",
            params: {
              orgCode: orgCode,
              updateUser: updateUser
            }
          })
          .then(res => {
            this.isLoading = false;
            this.$message.success(res.data.message);
            if (res.data.code == "success") {
              that.lookFor();
            }
          });
      });
    },
    //重置
    reset() {
      this.formData = {};
      this.findMonitorDeviceStateDownList();
    },
    //查询
    lookFor() {
      this.findMonitorDeviceStateDownList();
    },
    //关闭弹框
    handleClose() {
      const that = this;
      that.dialogVisible = false;
      that.$nextTick(() => {
        that.plan = {};
        that.$refs["plan"].resetFields();
      });
    },
    //查询服务区域
    findUnitValue() {
      this.$axios
        .$POST_NEW({
          api_name: "queryDistrictCascodeProvince",
          params: {}
        })
        .then(res => {
          if (res.data.code == "success") {
            var list = [];
            list = res.data.data.data;
            for (var key in list) {
              var temp = {};
              temp.value = list[key].value;
              temp.label = list[key].label;
              this.onlineStates.push(temp);
            }
          } else {
            console.log("没有数值。。。。。");
          }
        });
    },
    //服务区域查询
    findserviceArea() {
      const that = this;
      this.$axios
        .$POST_NEW({
          api_name: "queryDistrictCascode",
          params: {}
        })
        .then(res => {
          if (res.data.code == "success") {
            var list = [];
            list = res.data.data;
            for (var key in list) {
              if (list[key].parentCode == "000000") {
                var temp = {};
                temp.value = list[key].distCode;
                temp.parentCode = list[key].parentCode;
                temp.children = [];
                temp.shortSpelling = list[key].shortSpelling;
                temp.latitude = list[key].latitude;
                temp.fullSpelling = list[key].fullSpelling;
                temp.label = list[key].distName;
                temp.sortNum = list[key].sortNum;
                temp.distShortName = list[key].distShortName;
                temp.isLeaf = list[key].isLeaf;
                temp.longitude = list[key].longitude;
                temp.distNotes = list[key].distNotes;
                this.serviceArea.push(temp);
              } else {
                if (this.serviceArea.length > 0) {
                  for (var key1 in this.serviceArea) {
                    if (list[key].parentCode == this.serviceArea[key1].value) {
                      var temp = {};
                      temp.value = list[key].distCode;
                      temp.parentCode = list[key].parentCode;
                      temp.children = [];
                      temp.shortSpelling = list[key].shortSpelling;
                      temp.latitude = list[key].latitude;
                      temp.fullSpelling = list[key].fullSpelling;
                      temp.label = list[key].distName;
                      temp.sortNum = list[key].sortNum;
                      temp.distShortName = list[key].distShortName;
                      temp.isLeaf = list[key].isLeaf;
                      temp.longitude = list[key].longitude;
                      temp.distNotes = list[key].distNotes;
                      this.serviceArea[key1].children.push(temp);
                    } else {
                      var chlist = this.serviceArea[key1].children;
                      if (chlist.length > 0) {
                        for (var key2 in chlist) {
                          if (list[key].parentCode == chlist[key2].value) {
                            var temp = {};
                            temp.value = list[key].distCode;
                            temp.parentCode = list[key].parentCode;
                            // temp.children = [];
                            temp.shortSpelling = list[key].shortSpelling;
                            temp.latitude = list[key].latitude;
                            temp.fullSpelling = list[key].fullSpelling;
                            temp.label = list[key].distName;
                            temp.sortNum = list[key].sortNum;
                            temp.distShortName = list[key].distShortName;
                            temp.isLeaf = list[key].isLeaf;
                            temp.longitude = list[key].longitude;
                            temp.distNotes = list[key].distNotes;
                            chlist[key2].children.push(temp);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (that.optMode == "edit") {
              that.plan.fwqyValue = [];
              that.plan.lxdzValue = [];

              that.plan.fwqyValue.push(that.plan.province);
              that.plan.fwqyValue.push(that.plan.city);
              that.plan.lxdzValue.push(that.plan.province);
              that.plan.lxdzValue.push(that.plan.city);
              that.plan.lxdzValue.push(that.plan.contactCounty);
            }
          } else {
            console.log("没有数值。。。。。");
          }
        });
    },

    checkState: function(state) {
      return state == "1";
    },

    handleChange() {
      console.log(JSON.stringify(this.plan.fwqyValue));
      console.log(JSON.stringify(this.plan.lxdzValue));
    },
    //下载合同
    downloadFile(data) {
      //http://www.gsafetycloud.com/api/v1.1/operation-management/mainOperationOrgController/downloadAttachById?attId=2c9078c86b74830d016bb134760d0dc8
      window.open(
        "/test/mainOperationOrgController/downloadAttachById?attId=" +
          data.attachmentId
      );
    },

    saveOrUpdateForm(formName) {
      const that = this;
      if (that.optMode == "edit") {
        that.$refs[formName].validate(valid => {
          if (valid) {
            this.isLoading = true;
            const updateUser = this._Storage.getObj("userObj", "userObj").id;
            let attachIds = "";
            const array = that.plan.operationOrgAttachment;
            for (var key in array) {
              attachIds += array[key].attachmentUrl;
            }
            this.$axios
              .$POST_NEW({
                api_name: "updateOperationOrgServerByOrgCode",
                params: {
                  parentCode: that.plan.parentCode,
                  updateUser: updateUser,
                  orgCode: that.plan.orgCode,
                  orgName: that.plan.orgName,
                  // cascader: "230000,230100,",
                  province: that.plan.province,
                  city: that.plan.city,
                  joinType: that.plan.joinType,
                  cascader: that.plan.lxdzValue,
                  contactProvince: that.plan.contactProvince,
                  contactCity: that.plan.contactCity,
                  contactCounty: that.plan.contactCounty,
                  unitAddress: that.plan.unitAddress,
                  unitPointX: that.plan.unitPointX,
                  unitPointY: that.plan.unitPointY,
                  contactPerson: that.plan.contactPerson,
                  contactPersonTel: that.plan.contactPersonTel,
                  monitorServiceStatus: that.plan.monitorServiceStatus,
                  attachIds: attachIds
                }
              })
              .then(res => {
                that.isLoading = false;
                if (res.data.code == "success") {
                  that.$message.success("编辑成功！");
                  that.dialogVisible = false;
                  that.findMonitorDeviceStateDownList();
                } else {
                  that.$message.warning(res.data.message);
                }
              });
          } else {
            return false;
          }
        });
      }
      if (that.optMode == "add") {
        that.$refs[formName].validate(valid => {
          if (valid) {
            this.isLoading = true;
            const updateUser = this._Storage.getObj("userObj", "userObj").id;
            let attachIds = "";
            const array = that.plan.operationOrgAttachment;
            for (var key in array) {
              attachIds += array[key].attachmentUrl;
            }
            this.$axios
              .$POST_NEW({
                api_name: "saveOperationOrgInfo",
                params: {
                  parentCode: that.plan.parentCode,
                  updateUser: updateUser,
                  orgCode: that.plan.orgCode,
                  orgName: that.plan.orgName,
                  // cascader: "230000,230100,",
                  province: that.plan.province,
                  city: that.plan.city,
                  joinType: that.plan.joinType,
                  cascader: that.plan.lxdzValue,
                  contactProvince: that.plan.contactProvince,
                  contactCity: that.plan.contactCity,
                  contactCounty: that.plan.contactCounty,
                  unitAddress: that.plan.unitAddress,
                  unitPointX: that.plan.unitPointX,
                  unitPointY: that.plan.unitPointY,
                  contactPerson: that.plan.contactPerson,
                  contactPersonTel: that.plan.contactPersonTel,
                  monitorServiceStatus: that.plan.monitorServiceStatus,
                  attachIds: attachIds
                }
              })
              .then(res => {
                that.isLoading = false;
                if (res.data.code == "success") {
                  that.$message.success("新增成功！");
                  that.dialogVisible = false;
                  that.findMonitorDeviceStateDownList();
                } else {
                  that.$message.warning(res.data.message);
                }
              });
          } else {
            return false;
          }
        });
      }
    },

    //新增运营中心
    batchExportOutStock(method) {
      const that = this;
      that.dialogState = false;
      that.plan = {};
      that.dialogVisible = true;
      that.optTitle = "新增";
      that.optMode = method;
      if (that.serviceArea.length == 0) {
        that.findserviceArea();
      } else {
        that.plan.fwqyValue = [];
        that.plan.lxdzValue = [];
      }
    },

    //上传合同
    UploadImage(param) {
      //uploadOperationOrgAttach
      const that = this;
      const formData = new FormData();
      Object.keys(this.plan).forEach(key => {
        formData.append(key, this.plan[key]);
      });
      formData.append("multipartFile", param.file);
      formData.append("attType", "1");
      this.loading = true;
      this.$axios
        .$POSTFile({
          api_name: "uploadOperationOrgAttach",
          baseURL: "/test",
          fb: formData
        })
        .then(res => {
          this.loading = false;
          if (res.data.code == "success") {
            that.$message.success("合同上传成功！");
            let data = new Object();
            data.attachmentName = param.file.name;
            data.attachmentId = res.data.data;
            that.plan.operationOrgAttachment.push(data);
          } else {
            that.$message.error(res.data.message);
          }
        });
    },

    deleteFile(data) {
      const that = this;
      this.loading = true;
      this.$axios
        .$POST_NEW({
          api_name: "deleteOperationOrgAttach",
          params: {
            attachId: data.attachmentId
          }
        })
        .then(res => {
          this.loading = false;
          if (res.data.code == "success") {
            that.$message.success(res.data.message);
            that.plan.operationOrgAttachment = that.plan.operationOrgAttachment.filter(
              obj => {
                return obj.attachmentId != data.attachmentId;
              }
            );
          } else {
            that.$message.error(res.data.message);
          }
        });
    },
    //时间格式化
    format() {
      Date.prototype.Format = function(fmt) {
        var o = {
          "M+": this.getMonth() + 1,
          "d+": this.getDate(),
          "H+": this.getHours(),
          "m+": this.getMinutes(),
          "s+": this.getSeconds(),
          "S+": this.getMilliseconds()
        };
        //因为date.getFullYear()出来的结果是number类型的,所以为了让结果变成字符串型，下面有两种方法：
        if (/(y+)/.test(fmt)) {
          //第一种：利用字符串连接符“+”给date.getFullYear()+""，加一个空字符串便可以将number类型转换成字符串。
          fmt = fmt.replace(
            RegExp.$1,
            (this.getFullYear() + "").substr(4 - RegExp.$1.length)
          );
        }
        for (var k in o) {
          if (new RegExp("(" + k + ")").test(fmt)) {
            //第二种：使用String()类型进行强制数据类型转换String(date.getFullYear())，这种更容易理解。
            fmt = fmt.replace(
              RegExp.$1,
              RegExp.$1.length == 1
                ? o[k]
                : ("00" + o[k]).substr(String(o[k]).length)
            );
          }
        }
        return fmt;
      };
    },
      //地图选点
      mapChoosePoint(){
          const that = this;
          this.dialogMapVisible = true;
          if (this.optMode == 'add'){
              this.center = {};
              this.center.lng = "117.404";
              this.center.lat = "39.915";
          } else {
              //
              let lng = this.plan.unitPointX === ""?117.404:this.plan.unitPointX;
              let lat = this.plan.unitPointY === ""?39.915:this.plan.unitPointY;
              this.center = {};
              this.center.lng = lng;
              this.center.lat = lat;
              that.$nextTick(() => {
                  that.$refs["MyMap"].setLocationAdd(that.plan.unitAddress);
              });
          }
      },
      mapPointChange(pointObj){
          // debugger
      },
  }
};
</script>

<style lang="scss" scoped>
@import "~/assets/css/list.scss";
/*/deep/.el-table {*/
/*  .el-table__body-wrapper {*/
/*    //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px*/
/*    height: calc(*/
/*      100vh - 90px - 64px - 20px - 65px - 76px - 85px - 82px*/
/*    ) !important;*/
/*  }*/
/*}*/
/deep/.el-upload {
  float: left;
  margin-right: 20px;
}
.add-btn-style {
  text-align: right;
  padding-right: 25px;
  box-sizing: border-box;
}
.hardware-form {
  padding: 20px 25px 0 25px;
}
.list-wrap {
  //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76
  height: calc(100vh - 90px - 64px - 20px - 65px - 76px);
  overflow: hidden;
  /deep/.el-table {
    padding: 0;
    overflow: hidden;
    th {
      background: rgba(240, 243, 247, 1);
    }
    .el-table__body-wrapper {
      //导航90px 面包屑64px 距离底部20px 面板标题65px 查询form表单76 分页85 头部高度48px
      height: calc(100vh - 90px - 64px - 20px - 65px - 76px - 85px - 48px);
      overflow-y: auto;
    }
  }
}
</style>
