<template>
  <div>
<!--    <div class="Crumbs">-->
<!--      面包屑-->
<!--    </div>-->

    <div class="main-wrap">
      <el-row class="location">
        <el-col :span="12">
          <h3>硬件类别管理</h3>
        </el-col>
        <el-col :span="12" class="text-right">
          <el-button type="success" icon="el-icon-plus" @click="addOrEditDiglog('new')">新增</el-button>
        </el-col>
      </el-row>
      <div class="main-container">
        <!-- 查询 -->
        <el-form :inline="true" label-width="100px" :model="formData" ref="formData" class="downLineCol-form">
          <el-form-item label="ID:">
            <el-input placeholder="请输入" v-model="formData.unitName"></el-input>
          </el-form-item>
          <el-form-item label="硬件类型:" prop="unitName">
            <el-input placeholder="请输入" v-model="formData.deviceName"></el-input>
          </el-form-item>
          <el-form-item label=" ">
            <el-button type="primary" size="small" @click="lookFor()">查询</el-button>
            <el-button size="small" @click="reset('formData')">重置</el-button>
          </el-form-item>
        </el-form>
        <!-- 列表 -->
        <div class="list-wrap">
          <el-table v-loading.lock="isLoading" :data="tableData" stripe style="width: 100%;padding:0" height="300px" show-overflow-tooltip>
            <el-table-column label="ID" prop="deviceId" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="硬件类型" prop="subCenterName" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="父类型" prop="unitName" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="备注" prop="deviceAddress" show-overflow-tooltip align="center"></el-table-column>
            <el-table-column label="操作" show-overflow-tooltip align="center">
              <template slot-scope="scope">
                <el-link type="primary" @click="getParameter(scope.row)">删除</el-link>
                <el-link type="primary" @click="toDetail(scope.$index, scope.row)">编辑</el-link>
              </template>
            </el-table-column>
          </el-table>
        </div>
        <Pagination :widgetInfo="widgetInfo" v-on:sonHandleCurrentChange="sonHandleCurrentChange" />
      </div>
    </div>

<!--    编辑/新增 弹出框-->
    <el-dialog :title="dialogVisibleText" :visible.sync="dialogVisible" width="530px">
      <div class="dialog-body-diy-wrapper">
        <el-form class="dialog-form-style"  :label-position="labelPosition" label-width="120px" :model="addOrEditForm" ref="addOrEditForm">
          <el-row>
            <el-col :span="12">
              <el-form-item label="硬件类型" prop="YJLX" :rules="{ required: true, message: '请输入硬件类型', trigger: 'blur' }">
                <el-input v-model="addOrEditForm.YJLX">
                </el-input>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="父类">
                <el-input v-model="addOrEditForm.FLX"></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-form-item label="备注">
            <el-input type="textarea" v-model="addOrEditForm.BZ" :rows="4"></el-input>
          </el-form-item>
        </el-form>
      </div>
      <span slot="footer" class="dialog-footer">
        <el-button @click="dialogVisible = false">取 消</el-button>
        <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
      </span>
    </el-dialog>
<!--    删除 弹出框 el-icon-s-opportunity-->
    <el-dialog custom-class="del-dialog-wrap"  :visible.sync="dialogDelVisible" width="280px">
      <div class="del-dialog-main">
        <div class="icon-wrap">
          <i class="el-icon-s-opportunity"></i>
        </div>
        <div class="p-wrap">
          <p class="title-p">是否确定删除？</p>
          <p class="tips-p">删除后将不可恢复</p>
        </div>
      </div>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
         <el-button @click="dialogVisible = false">取 消</el-button>
      </span>
    </el-dialog>

  </div>
</template>
<script>
import Pagination from "~/components/Pagination";
export default {
  layout: 'new',
  components: {
    Pagination
  },

  data() {
    return {
      dialogVisible: false,//新增修改弹出
      dialogDelVisible:false,//删除弹出框
      dialogVisibleText: '新增',
      flag: false,
      labelPosition: 'top',
      isLoading: false,
      formData: {},
      tableData: [],
      loading: true,
      pageNo: 1,
      pageSize: 6,
      total: 0,
      widgetInfo: {
        pageSize: 6,
        pageNo: 1,
        total: 0,
      },
      addOrEditForm:{
        YJLX:'',
        FLX:'',
        BZ:''
      }
    }
  },
  mounted() {
    this.findSubCenterValue();
  },
  computed: {

  },
  methods: {
    //新增
    addOrEditDiglog(type) {
      let that = this;
      that.dialogVisible = true;
      if (type == 'new') {
        that.dialogVisibleText === '编辑'
      } else {
        that.dialogVisibleText === '修改'
      }
    },
    findMonitorDeviceStateDownList() {//硬件平台-下行控制列表
      this.isLoading = true;
      this.$axios.$POST({
        api_name: "findMonitorDeviceStateDownList",
        params: {
          deviceId: "cayfsyxz1",
          subCenterName: this.formData.subCenterName,
          unitName: this.formData.unitName,
          deviceAddress: this.formData.deviceAddress,
          deviceName: this.formData.deviceName,
          brand: this.formData.brand,
          model: this.formData.model,
          onlineState: this.formData.onlineState,
          createTime: this.formData.createTime,
          exist: this.formData.exist,
          pageNo: this.widgetInfo.pageNo,
          pageSize: this.widgetInfo.pageSize,
        }
      }).then(res => {
        if (res.data.code == 'success') {
          this.isLoading = false;
          var data = res.data.data
          this.tableData = data.rows;
          this.widgetInfo.total = data.total === null ? 0 : data.total;
        } else {
          this.tableData = [];
          this.widgetInfo.list = data.rows;
          this.widgetInfo.total = 0;
          console.log('没有数值。。。。。')
        }

      })

    },
    findSubCenterValue() {//硬件平台-下行控制列表
      this.$axios.$POST({
        api_name: "findSubCenterValue",

      }).then(res => {
        if (res.data.code == 'success') {
          this.subCenterNames = res.data.data;

        } else {

        }

      })

    },
    toDetail(index, row) {
      this.$router.push({
        name: 'downLine-downlinkControlDetail',
        params: {
          row: row,

        }
      })
    },
    getParameter(row) {//获取协议、参数
      if (row.sourceId == "bjlnUDP") {
        this.$axios.$POST({//立安协议/参数
          api_name: "hnlaSendDown",
          params: {
            monitorId: row.id,
            controlHost: row.controlHost,
            sourceId: row.sourceId,
            commandType: 4,
            operationItemType: "",
            dataValue: ""
          }
        }).then(res => {
          if (res.data.code == 'success') {
            console.log("1111")
            row.exist == '1'

          } else {
            console.log("失败")
          }

        })
      } else if (row.sourceId == "bjlnUDP") {//乐鸟协议/参数
        this.$axios.$POST({
          api_name: "hnlaSendDown",
          params: {
            monitorId: row.id,
            controlHost: row.controlHost,
            sourceId: row.sourceId,
            commandType: "",
            params: ""
          }

        }).then(res => {
          if (res.data.code == 'success') {
            console.log("1111")
            row.exist == '1'

          } else {
            console.log("失败")
          }

        })
      }
    },
    sonHandleCurrentChange(widgetInfo) {
      this.widgetInfo.pageSize = (widgetInfo.pageSize ? parseInt(widgetInfo.pageSize) : this.widgetInfo.pageSize);
      this.widgetInfo.pageNo = (widgetInfo.pageNo ? parseInt(widgetInfo.pageNo) : this.widgetInfo.pageNo);
      this.findMonitorDeviceStateDownList();

    },
    reset(formName) {//重置
      this.formData = {};
      this.findMonitorDeviceStateDownList();
    },
    lookFor() {//查询
      this.findMonitorDeviceStateDownList();
    }
  },


}
</script>
<style lang="scss" >
.location {
  .text-right {
    padding-right: 20px;
    text-align: right;
  }
}
.downLineCol-form {
  display: flex;
  .el-form-item__content {
    width: calc(100% - 105px);
  }
  .el-form-item {
    width: 20%;
    .el-form-item__label {
      width: 80px;
    }
  }
}
.list-wrap {
  margin: 0 -20px;
  height: calc(100vh - 65px - 165px - 80px - 20px);
  overflow: hidden;
  .el-table th {
    background: rgba(240, 243, 247, 1);
  }
}

</style>
